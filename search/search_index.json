{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"bouheki: KRSI(eBPF+LSM) based Linux security auditing tool bouheki is KRSI(eBPF+LSM) based Linux security auditing tool. Security events can be audited and blocked based on the container of the process, and restrictions can be applied to container environments. Features Restriction rules based on process context, such as command name or UID and more Restrictions limited to containers (hosts are not restricted) Network Access Control File Access Control Restictions bind mounts from host filesystem to containers Demo LICENSE bouheki's userspace program is licensed under MIT License. eBPF programs inside pkg/bpf directory are licensed under GNU General Public License version 2 .","title":"HOME"},{"location":"#bouheki-krsiebpflsm-based-linux-security-auditing-tool","text":"bouheki is KRSI(eBPF+LSM) based Linux security auditing tool. Security events can be audited and blocked based on the container of the process, and restrictions can be applied to container environments.","title":"bouheki: KRSI(eBPF+LSM) based Linux security auditing tool"},{"location":"#features","text":"Restriction rules based on process context, such as command name or UID and more Restrictions limited to containers (hosts are not restricted) Network Access Control File Access Control Restictions bind mounts from host filesystem to containers","title":"Features"},{"location":"#demo","text":"","title":"Demo"},{"location":"#license","text":"bouheki's userspace program is licensed under MIT License. eBPF programs inside pkg/bpf directory are licensed under GNU General Public License version 2 .","title":"LICENSE"},{"location":"configuration/configuration/","text":"Configuration bouheki's configuration file is a YAML file containing a collection of key: value or key: [value list] pairs. Current configuration options Config Type Description network List (see Network Restiction ) Rule for network restrictions. files List (see File Access Restiction ) Rule for file access restrictions. mount List (see Mount Restiction ) Rule for mount restrictions. dns_proxy List (see DNS Proxy ) DNS Proxy configurations log List containing the following sub-keys: format: [json|text] output: <path> max_size: : Maximum size to rotate (MB). Default: 100MB max_age : Period for which logs are kept. Default: 365 labels : Key / Value to be added to the log. Log configuration.","title":"Configuration"},{"location":"configuration/configuration/#configuration","text":"bouheki's configuration file is a YAML file containing a collection of key: value or key: [value list] pairs.","title":"Configuration"},{"location":"configuration/configuration/#current-configuration-options","text":"Config Type Description network List (see Network Restiction ) Rule for network restrictions. files List (see File Access Restiction ) Rule for file access restrictions. mount List (see Mount Restiction ) Rule for mount restrictions. dns_proxy List (see DNS Proxy ) DNS Proxy configurations log List containing the following sub-keys: format: [json|text] output: <path> max_size: : Maximum size to rotate (MB). Default: 100MB max_age : Period for which logs are kept. Default: 365 labels : Key / Value to be added to the log. Log configuration.","title":"Current configuration options"},{"location":"configuration/dns_proxy/","text":"DNS Proxy If you want to control access by specifying domain names , you need to select \"Periodic Name Resolution\" or \"Change DNS Server\". Default is \"Periodic Name Resolution\", but recommended is \"Change DNS Server\". Periodic Name Resolution (Default) Periodically resolves domain names and updates IP addresses in the Allow / Deny list. Warning It is designed to perform name resolution when the TTL value reaches 0. This means that depending on the timing, there may be rare cases where communication to an restricted address is possible, or where communication to an restricted address is not possible. This often occurs in domains with short TTL, such as AWS S3. Change DNS Server (Recommend) If dns_proxy is enabled, bouheki will start DNS Proxy. Specify 127.0.0.1 and 172.17.0.1 (default bridge for docker) for nameserver in /etc/resolv.conf . If the domain to be name resolved is restricted, update the IP address in the Allow / Deny list. Warning If you are using systemd-resolved, change /etc/systemd/resolved.conf instead of /etc/resolv.conf . For example: DNS=127.0.0.1 172.17.0.1 Current configuration options Config Type Description enable Enum with the following possible values: true , false Whether to enable DNS Proxy or not. Default is false . upstreams List Lisf of DNS Servers.","title":"DNS Proxy"},{"location":"configuration/dns_proxy/#dns-proxy","text":"If you want to control access by specifying domain names , you need to select \"Periodic Name Resolution\" or \"Change DNS Server\". Default is \"Periodic Name Resolution\", but recommended is \"Change DNS Server\".","title":"DNS Proxy"},{"location":"configuration/dns_proxy/#periodic-name-resolution-default","text":"Periodically resolves domain names and updates IP addresses in the Allow / Deny list. Warning It is designed to perform name resolution when the TTL value reaches 0. This means that depending on the timing, there may be rare cases where communication to an restricted address is possible, or where communication to an restricted address is not possible. This often occurs in domains with short TTL, such as AWS S3.","title":"Periodic Name Resolution (Default)"},{"location":"configuration/dns_proxy/#change-dns-server-recommend","text":"If dns_proxy is enabled, bouheki will start DNS Proxy. Specify 127.0.0.1 and 172.17.0.1 (default bridge for docker) for nameserver in /etc/resolv.conf . If the domain to be name resolved is restricted, update the IP address in the Allow / Deny list. Warning If you are using systemd-resolved, change /etc/systemd/resolved.conf instead of /etc/resolv.conf . For example: DNS=127.0.0.1 172.17.0.1","title":"Change DNS Server (Recommend)"},{"location":"configuration/dns_proxy/#current-configuration-options","text":"Config Type Description enable Enum with the following possible values: true , false Whether to enable DNS Proxy or not. Default is false . upstreams List Lisf of DNS Servers.","title":"Current configuration options"},{"location":"configuration/file-access-restriction/configuration/","text":"Current configuration options Linux Kernel >= 5.13 is required to use this option. Config Type Description enable Enum with the following possible values: true , false Whether to enable restrictions or not. Default is true . mode Enum with the following possible values: monitor , block If monitor is specified, events are only logged. If block is specified, network access is blocked. target Enum with the following possible values: host , container Selecting host applies the restriction to the host-wide. Selecting container will apply the restriction only to containers. allow A list of allow file paths deny A list of allow file paths Warning Currently file access restrictions cannot be based on process context (command name, UID, etc). This is because the eBPF Program size becomes too large, and it is failed pass by the eBPF Verifier's limitations. If you can create a better eBPF program, please contribute!","title":"Configuration"},{"location":"configuration/file-access-restriction/configuration/#current-configuration-options","text":"Linux Kernel >= 5.13 is required to use this option. Config Type Description enable Enum with the following possible values: true , false Whether to enable restrictions or not. Default is true . mode Enum with the following possible values: monitor , block If monitor is specified, events are only logged. If block is specified, network access is blocked. target Enum with the following possible values: host , container Selecting host applies the restriction to the host-wide. Selecting container will apply the restriction only to containers. allow A list of allow file paths deny A list of allow file paths Warning Currently file access restrictions cannot be based on process context (command name, UID, etc). This is because the eBPF Program size becomes too large, and it is failed pass by the eBPF Verifier's limitations. If you can create a better eBPF program, please contribute!","title":"Current configuration options"},{"location":"configuration/file-access-restriction/examples/","text":"Examples Allow access to all files file : mode : monitor target : host allow : - / Block access to /etc/passwd file : mode : block target : host allow : - / deny : - /etc/passwd Block all access to the /root/.ssh directory file : mode : block target : host allow : - / deny : - /root/.ssh Block access to the /proc/sys directory in the container file : mode : block target : container allow : - / deny : - /proc/sys Example root@ubuntu-impish:/# ls /proc/sys abi debug dev fs kernel net user vm root@ubuntu-impish:/# docker run --privileged --rm -it ubuntu:latest bash root@9cf961922b00:/# ls /proc/sys ls: cannot open directory '/proc/sys' : Operation not permitted Block escapes from Privileged Container file : mode : block target : container allow : - / deny : - /proc/sysrq-trigger - /sys/kernel - /proc/sys/kernel Example root@ubuntu-impish:/# docker run --privileged --rm -it ubuntu:latest bash root@e3b2ffe5b284:/# echo c > /proc/sysrq-trigger bash: /proc/sysrq-trigger: Operation not permitted root@e3b2ffe5b284:/# echo '/path/to/evil' > /sys/kernel/uevent_helper bash: /sys/kernel/uevent_helper: Operation not permitted root@e3b2ffe5b284:/# echo '|/path/to/evil' > /proc/sys/kernel/core_pattern bash: /proc/sys/kernel/core_pattern: Operation not permitted","title":"Examples"},{"location":"configuration/file-access-restriction/examples/#examples","text":"","title":"Examples"},{"location":"configuration/file-access-restriction/examples/#allow-access-to-all-files","text":"file : mode : monitor target : host allow : - /","title":"Allow access to all files"},{"location":"configuration/file-access-restriction/examples/#block-access-to-etcpasswd","text":"file : mode : block target : host allow : - / deny : - /etc/passwd","title":"Block access to /etc/passwd"},{"location":"configuration/file-access-restriction/examples/#block-all-access-to-the-rootssh-directory","text":"file : mode : block target : host allow : - / deny : - /root/.ssh","title":"Block all access to the /root/.ssh directory"},{"location":"configuration/file-access-restriction/examples/#block-access-to-the-procsys-directory-in-the-container","text":"file : mode : block target : container allow : - / deny : - /proc/sys Example root@ubuntu-impish:/# ls /proc/sys abi debug dev fs kernel net user vm root@ubuntu-impish:/# docker run --privileged --rm -it ubuntu:latest bash root@9cf961922b00:/# ls /proc/sys ls: cannot open directory '/proc/sys' : Operation not permitted","title":"Block access to the /proc/sys directory in the container"},{"location":"configuration/file-access-restriction/examples/#block-escapes-from-privileged-container","text":"file : mode : block target : container allow : - / deny : - /proc/sysrq-trigger - /sys/kernel - /proc/sys/kernel Example root@ubuntu-impish:/# docker run --privileged --rm -it ubuntu:latest bash root@e3b2ffe5b284:/# echo c > /proc/sysrq-trigger bash: /proc/sysrq-trigger: Operation not permitted root@e3b2ffe5b284:/# echo '/path/to/evil' > /sys/kernel/uevent_helper bash: /sys/kernel/uevent_helper: Operation not permitted root@e3b2ffe5b284:/# echo '|/path/to/evil' > /proc/sys/kernel/core_pattern bash: /proc/sys/kernel/core_pattern: Operation not permitted","title":"Block escapes from Privileged Container"},{"location":"configuration/mount-restriction/configuration/","text":"Current configuration options Linux Kernel >= 5.13 is required to use this option. Config Type Description enable Enum with the following possible values: true , false Whether to enable restrictions or not. Default is true . mode Enum with the following possible values: monitor , block If monitor is specified, events are only logged. If block is specified, network access is blocked. target Enum with the following possible values: host , container Selecting host applies the restriction to the host-wide. Selecting container will apply the restriction only to containers. deny A list of allow file paths Warning Currently file access restrictions cannot be based on process context (command name, UID, etc). This is because the eBPF Program size becomes too large, and it is failed pass by the eBPF Verifier's limitations. If you can create a better eBPF program, please contribute!","title":"Configuration"},{"location":"configuration/mount-restriction/configuration/#current-configuration-options","text":"Linux Kernel >= 5.13 is required to use this option. Config Type Description enable Enum with the following possible values: true , false Whether to enable restrictions or not. Default is true . mode Enum with the following possible values: monitor , block If monitor is specified, events are only logged. If block is specified, network access is blocked. target Enum with the following possible values: host , container Selecting host applies the restriction to the host-wide. Selecting container will apply the restriction only to containers. deny A list of allow file paths Warning Currently file access restrictions cannot be based on process context (command name, UID, etc). This is because the eBPF Program size becomes too large, and it is failed pass by the eBPF Verifier's limitations. If you can create a better eBPF program, please contribute!","title":"Current configuration options"},{"location":"configuration/mount-restriction/examples/","text":"Block mount /var/run/docker.sock to container mount : mode : block target : host deny : - /var/run/docker.sock Example # docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock ubuntu:latest bash docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: rootfs_linux.go:76: mounting \"/var/run/docker.sock\" to rootfs at \"/var/run/docker.sock\" caused: mount through procfd: operation not permitted: unknown.","title":"Examples"},{"location":"configuration/mount-restriction/examples/#block-mount-varrundockersock-to-container","text":"mount : mode : block target : host deny : - /var/run/docker.sock Example # docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock ubuntu:latest bash docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: rootfs_linux.go:76: mounting \"/var/run/docker.sock\" to rootfs at \"/var/run/docker.sock\" caused: mount through procfd: operation not permitted: unknown.","title":"Block mount /var/run/docker.sock to container"},{"location":"configuration/network-restriction/configuration/","text":"Current configuration options Config Type Description enable Enum with the following possible values: true , false Whether to enable restrictions or not. Default is true . mode Enum with the following possible values: monitor , block If monitor is specified, events are only logged. If block is specified, network access is blocked. target Enum with the following possible values: host , container Selecting host applies the restriction to the host-wide. Selecting container will apply the restriction only to containers. cidr List containing the following sub-keys: allow: [cidr list] deny: [cidr list] Allow or Deny CIDRs. domain List containing the following sub-keys: allow: [domain list] deny: [domain list] Allow or Deny Domains. command List containing the following sub-keys: allow: [command list] deny: [command list] Allow or Deny commands. uid List containing the following sub-keys: allow: [uid list] deny: [uid list] Allow or Deny uids. gid List containing the following sub-keys: allow: [gid list] deny: [gid list] Allow or Deny gids.","title":"Configuration"},{"location":"configuration/network-restriction/configuration/#current-configuration-options","text":"Config Type Description enable Enum with the following possible values: true , false Whether to enable restrictions or not. Default is true . mode Enum with the following possible values: monitor , block If monitor is specified, events are only logged. If block is specified, network access is blocked. target Enum with the following possible values: host , container Selecting host applies the restriction to the host-wide. Selecting container will apply the restriction only to containers. cidr List containing the following sub-keys: allow: [cidr list] deny: [cidr list] Allow or Deny CIDRs. domain List containing the following sub-keys: allow: [domain list] deny: [domain list] Allow or Deny Domains. command List containing the following sub-keys: allow: [command list] deny: [command list] Allow or Deny commands. uid List containing the following sub-keys: allow: [uid list] deny: [uid list] Allow or Deny uids. gid List containing the following sub-keys: allow: [gid list] deny: [gid list] Allow or Deny gids.","title":"Current configuration options"},{"location":"configuration/network-restriction/examples/","text":"Examples Allow all network connections Allows all network communications and monitors their connections. network : mode : monitor target : host cidr : allow : [ '0.0.0.0/0' ] Block specify Private Networks Block access to 192.168.1.1/24 and 10.0.1.1/24 . network : mode : block target : host cidr : allow : [ '0.0.0.0/0' ] deny : - 192.168.1.1/24 - 10.0.1.1/24 Block Metadata service API Block access to the public cloud Metadata Service. This is a mitigation measure against SSRF, etc. network : mode : block target : host cidr : allow : [ '0.0.0.0/0' ] deny : - 169.254.169.254/32 Block connections to the specified domain Block connections to example.com . bouheki periodically looks up IP addresses, so it keeps up with IP address changes. network : mode : block target : host cidr : allow : [ '0.0.0.0/0' ] domain : deny : - example.com Block network connections of containers Allow communication from the host, but block communication from the containers. network : mode : block target : container cidr : allow : [ '0.0.0.0/0' ] domain : deny : - example.com Example vagrant@ubuntu-impish:~$ curl -I https://example.com HTTP/2 200 vagrant@ubuntu-impish:~$ sudo docker run --rm -it curlimages/curl https://example.com curl: ( 7 ) Couldn ' t connect to server Block all connections from curl network : mode : monitor target : container cidr : allow : [ '0.0.0.0/0' ] command : deny : [ 'curl' ] Example vagrant@ubuntu-impish:~$ curl -I https://example.com curl: ( 6 ) Could not resolve host: example.com vagrant@ubuntu-impish:~$ wget https://example.com -O /dev/null --2022-03-09 14 :45:11-- http://example.com/ Resolving example.com ( example.com ) ... 93 .184.216.34 Connecting to example.com ( example.com ) | 93 .184.216.34 | :80... connected. HTTP request sent, awaiting response... 200 OK Length: 1256 ( 1 .2K ) [ text/html ] Saving to: \u2018/dev/null\u2019 /dev/null 100 % [============================ > ] 1 .23K --.-KB/s in 0s 2022 -03-09 14 :45:12 ( 70 .1 MB/s ) - \u2018/dev/null\u2019 saved [ 1256 /1256 ] Block all connections by users with UID 1000 Setting that blocks all network access for UID 1000 user, but does not apply restrictions to UID 0 (root). network : mode : monitor target : container cidr : allow : [ '0.0.0.0/0' ] uid : allow : [ 0 ] deny : [ 1000 ] Example vagrant@ubuntu-impish:~$ id uid = 1000 ( vagrant ) gid = 1000 ( vagrant ) groups = 1000 ( vagrant ) vagrant@ubuntu-impish:~$ curl -I https://example.com curl: ( 6 ) Could not resolve host: example.com vagrant@ubuntu-impish:~$ sudo curl -I https://example.com HTTP/2 200","title":"Examples"},{"location":"configuration/network-restriction/examples/#examples","text":"","title":"Examples"},{"location":"configuration/network-restriction/examples/#allow-all-network-connections","text":"Allows all network communications and monitors their connections. network : mode : monitor target : host cidr : allow : [ '0.0.0.0/0' ]","title":"Allow all network connections"},{"location":"configuration/network-restriction/examples/#block-specify-private-networks","text":"Block access to 192.168.1.1/24 and 10.0.1.1/24 . network : mode : block target : host cidr : allow : [ '0.0.0.0/0' ] deny : - 192.168.1.1/24 - 10.0.1.1/24","title":"Block specify Private Networks"},{"location":"configuration/network-restriction/examples/#block-metadata-service-api","text":"Block access to the public cloud Metadata Service. This is a mitigation measure against SSRF, etc. network : mode : block target : host cidr : allow : [ '0.0.0.0/0' ] deny : - 169.254.169.254/32","title":"Block Metadata service API"},{"location":"configuration/network-restriction/examples/#block-connections-to-the-specified-domain","text":"Block connections to example.com . bouheki periodically looks up IP addresses, so it keeps up with IP address changes. network : mode : block target : host cidr : allow : [ '0.0.0.0/0' ] domain : deny : - example.com","title":"Block connections to the specified domain"},{"location":"configuration/network-restriction/examples/#block-network-connections-of-containers","text":"Allow communication from the host, but block communication from the containers. network : mode : block target : container cidr : allow : [ '0.0.0.0/0' ] domain : deny : - example.com Example vagrant@ubuntu-impish:~$ curl -I https://example.com HTTP/2 200 vagrant@ubuntu-impish:~$ sudo docker run --rm -it curlimages/curl https://example.com curl: ( 7 ) Couldn ' t connect to server","title":"Block network connections of containers"},{"location":"configuration/network-restriction/examples/#block-all-connections-from-curl","text":"network : mode : monitor target : container cidr : allow : [ '0.0.0.0/0' ] command : deny : [ 'curl' ] Example vagrant@ubuntu-impish:~$ curl -I https://example.com curl: ( 6 ) Could not resolve host: example.com vagrant@ubuntu-impish:~$ wget https://example.com -O /dev/null --2022-03-09 14 :45:11-- http://example.com/ Resolving example.com ( example.com ) ... 93 .184.216.34 Connecting to example.com ( example.com ) | 93 .184.216.34 | :80... connected. HTTP request sent, awaiting response... 200 OK Length: 1256 ( 1 .2K ) [ text/html ] Saving to: \u2018/dev/null\u2019 /dev/null 100 % [============================ > ] 1 .23K --.-KB/s in 0s 2022 -03-09 14 :45:12 ( 70 .1 MB/s ) - \u2018/dev/null\u2019 saved [ 1256 /1256 ]","title":"Block all connections from curl"},{"location":"configuration/network-restriction/examples/#block-all-connections-by-users-with-uid-1000","text":"Setting that blocks all network access for UID 1000 user, but does not apply restrictions to UID 0 (root). network : mode : monitor target : container cidr : allow : [ '0.0.0.0/0' ] uid : allow : [ 0 ] deny : [ 1000 ] Example vagrant@ubuntu-impish:~$ id uid = 1000 ( vagrant ) gid = 1000 ( vagrant ) groups = 1000 ( vagrant ) vagrant@ubuntu-impish:~$ curl -I https://example.com curl: ( 6 ) Could not resolve host: example.com vagrant@ubuntu-impish:~$ sudo curl -I https://example.com HTTP/2 200","title":"Block all connections by users with UID 1000"},{"location":"development/build/","text":"Build $ vagrant ssh $ cd /opt/go/src/github.com/mrtc0/bouheki/ $ make libbpf-static $ make build Test $ make test","title":"Build and Test"},{"location":"development/build/#build","text":"$ vagrant ssh $ cd /opt/go/src/github.com/mrtc0/bouheki/ $ make libbpf-static $ make build","title":"Build"},{"location":"development/build/#test","text":"$ make test","title":"Test"},{"location":"development/setup/","text":"Setup There are several required packages. It is also necessary to change the kernel boot parameters. See Vagrantfile provisioning settings for details. $ git clone --recursive git@github.com:mrtc0/bouheki.git && cd bouheki $ vagrant up && vagrant reload $ vagrant ssh","title":"Setup"},{"location":"development/setup/#setup","text":"There are several required packages. It is also necessary to change the kernel boot parameters. See Vagrantfile provisioning settings for details. $ git clone --recursive git@github.com:mrtc0/bouheki.git && cd bouheki $ vagrant up && vagrant reload $ vagrant ssh","title":"Setup"},{"location":"getting-started/installation/","text":"Installation Requirements Linux Kernel >= 5.8.0 BTF( CONFIG_DEBUG_INFO_BTF ) must be enabled. BPF LSM( CONFIG_LSM with bpf ) must be enabled. This parameter can also be changed in the boot parameter. Kernel Configuration The kernel must have been compiled with the following flags set: CONFIG_BPF = y CONFIG_BPF_SYSCALL = y CONFIG_BPF_LSM = y CONFIF_BPF_JIT = y CONFIG_HAVE_EBPF_JIT = y CONFIG_BPF_EVENTS = y CONFIG_DEBUG_INTO_BTF = y Kernel compile flags can usually be checked by looking at /proc/config.gz or /boot/config-<kernel-version> . Also, the CONFIG_LSM flag must contain bpf . This can also be controlled by boot parameters as following: $ cat /etc/default/grub ... GRUB_CMDLINE_LINUX = \"... lsm=lockdown,yama,apparmor,bpf\" ... Finary, run update-grub2 . sudo update-grub2 Linux distributions and supported kernels Distro Name Distro Version Kernel Version Ubuntu >= 20.10 5.8+ Fedora >= 33 5.8+ Install Download latest released binary from https://github.com/mrtc0/bouheki/releases $ wget https://github.com/mrtc0/bouheki/releases/download/v0.0.3/bouheki_0.0.3_Linux_x86_64.tar.gz $ tar xzf bouhki_0.0.3_Linux_x86_64.tar.gz $ sudo install bouheki /usr/local/bin/bouheki","title":"Installation"},{"location":"getting-started/installation/#installation","text":"","title":"Installation"},{"location":"getting-started/installation/#requirements","text":"Linux Kernel >= 5.8.0 BTF( CONFIG_DEBUG_INFO_BTF ) must be enabled. BPF LSM( CONFIG_LSM with bpf ) must be enabled. This parameter can also be changed in the boot parameter.","title":"Requirements"},{"location":"getting-started/installation/#kernel-configuration","text":"The kernel must have been compiled with the following flags set: CONFIG_BPF = y CONFIG_BPF_SYSCALL = y CONFIG_BPF_LSM = y CONFIF_BPF_JIT = y CONFIG_HAVE_EBPF_JIT = y CONFIG_BPF_EVENTS = y CONFIG_DEBUG_INTO_BTF = y Kernel compile flags can usually be checked by looking at /proc/config.gz or /boot/config-<kernel-version> . Also, the CONFIG_LSM flag must contain bpf . This can also be controlled by boot parameters as following: $ cat /etc/default/grub ... GRUB_CMDLINE_LINUX = \"... lsm=lockdown,yama,apparmor,bpf\" ... Finary, run update-grub2 . sudo update-grub2","title":"Kernel Configuration"},{"location":"getting-started/installation/#linux-distributions-and-supported-kernels","text":"Distro Name Distro Version Kernel Version Ubuntu >= 20.10 5.8+ Fedora >= 33 5.8+","title":"Linux distributions and supported kernels"},{"location":"getting-started/installation/#install","text":"Download latest released binary from https://github.com/mrtc0/bouheki/releases $ wget https://github.com/mrtc0/bouheki/releases/download/v0.0.3/bouheki_0.0.3_Linux_x86_64.tar.gz $ tar xzf bouhki_0.0.3_Linux_x86_64.tar.gz $ sudo install bouheki /usr/local/bin/bouheki","title":"Install"},{"location":"getting-started/overview/","text":"Overview bouheki detects (and prevents) two type of security events: Network Access File Access Mount bouheki can choose between the following two restriction target: Host-wide Container Only bouheki can be run in two modes: Monitor Mode Block Mode Features Restriction rules can be created based on various process contexts Process (Command) name Parent Process (Command) name UID / GID Monitoring and Blocking modes Two modes are available: monitoring mode, which monitors and logs events, and blocking mode, which blocks events For Containers Restrictions can be applied to containers only DEMO","title":"Overview"},{"location":"getting-started/overview/#overview","text":"bouheki detects (and prevents) two type of security events: Network Access File Access Mount bouheki can choose between the following two restriction target: Host-wide Container Only bouheki can be run in two modes: Monitor Mode Block Mode","title":"Overview"},{"location":"getting-started/overview/#features","text":"Restriction rules can be created based on various process contexts Process (Command) name Parent Process (Command) name UID / GID Monitoring and Blocking modes Two modes are available: monitoring mode, which monitors and logs events, and blocking mode, which blocks events For Containers Restrictions can be applied to containers only","title":"Features"},{"location":"getting-started/overview/#demo","text":"","title":"DEMO"},{"location":"getting-started/quickstart/","text":"Quick Start Write a configuration file # example.yml network : mode : block target : host cidr : allow : - 0.0.0.0/0 domain : deny : - example.com command : allow : - systemd-resolved - curl - bouheki files : mode : block target : host allow : - '/' deny : - '/etc/passwd' log : format : json This configuration file sets the following limits: Block access to example.com However, access allowed by specified commands with command.allow (such as curl ) Block access to /etc/passwd For more information for configurations, see here . Run $ sudo bouheki --config example.yml Docker $ docker run --rm -it --cgroupns = host --pid = host --privileged \\ -v /sys/kernel/:/sys/kernel/ \\ -v /sys/fs/bpf:/sys/fs/bpf \\ -v /path/to/config.yaml:/config.yaml \\ --env BOUHEKI_SKIP_COMPATIBLE_CHECK = 1 \\ ghcr.io/mrtc0/bouheki:latest --config /config.yaml","title":"Quick Start"},{"location":"getting-started/quickstart/#quick-start","text":"","title":"Quick Start"},{"location":"getting-started/quickstart/#write-a-configuration-file","text":"# example.yml network : mode : block target : host cidr : allow : - 0.0.0.0/0 domain : deny : - example.com command : allow : - systemd-resolved - curl - bouheki files : mode : block target : host allow : - '/' deny : - '/etc/passwd' log : format : json This configuration file sets the following limits: Block access to example.com However, access allowed by specified commands with command.allow (such as curl ) Block access to /etc/passwd For more information for configurations, see here .","title":"Write a configuration file"},{"location":"getting-started/quickstart/#run","text":"$ sudo bouheki --config example.yml","title":"Run"},{"location":"getting-started/quickstart/#docker","text":"$ docker run --rm -it --cgroupns = host --pid = host --privileged \\ -v /sys/kernel/:/sys/kernel/ \\ -v /sys/fs/bpf:/sys/fs/bpf \\ -v /path/to/config.yaml:/config.yaml \\ --env BOUHEKI_SKIP_COMPATIBLE_CHECK = 1 \\ ghcr.io/mrtc0/bouheki:latest --config /config.yaml","title":"Docker"},{"location":"use-cases/prevent-container-breakout/","text":"Prevent Breakout Container Block mount /var/run/docker.sock to container mount : mode : block target : host deny : - /var/run/docker.sock Example # docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock ubuntu:latest bash docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: rootfs_linux.go:76: mounting \"/var/run/docker.sock\" to rootfs at \"/var/run/docker.sock\" caused: mount through procfd: operation not permitted: unknown. Block access to the /proc/sys directory in the container file : mode : block target : container allow : - / deny : - /proc/sys Example root@ubuntu-impish:/# ls /proc/sys abi debug dev fs kernel net user vm root@ubuntu-impish:/# docker run --privileged --rm -it ubuntu:latest bash root@9cf961922b00:/# ls /proc/sys ls: cannot open directory '/proc/sys' : Operation not permitted Block escapes from Privileged Container file : mode : block target : container allow : - / deny : - /proc/sysrq-trigger - /sys/kernel - /proc/sys/kernel Example root@ubuntu-impish:/# docker run --privileged --rm -it ubuntu:latest bash root@e3b2ffe5b284:/# echo c > /proc/sysrq-trigger bash: /proc/sysrq-trigger: Operation not permitted root@e3b2ffe5b284:/# echo '/path/to/evil' > /sys/kernel/uevent_helper bash: /sys/kernel/uevent_helper: Operation not permitted root@e3b2ffe5b284:/# echo '|/path/to/evil' > /proc/sys/kernel/core_pattern bash: /proc/sys/kernel/core_pattern: Operation not permitted","title":"Prevent Breakout Container"},{"location":"use-cases/prevent-container-breakout/#prevent-breakout-container","text":"","title":"Prevent Breakout Container"},{"location":"use-cases/prevent-container-breakout/#block-mount-varrundockersock-to-container","text":"mount : mode : block target : host deny : - /var/run/docker.sock Example # docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock ubuntu:latest bash docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: rootfs_linux.go:76: mounting \"/var/run/docker.sock\" to rootfs at \"/var/run/docker.sock\" caused: mount through procfd: operation not permitted: unknown.","title":"Block mount /var/run/docker.sock to container"},{"location":"use-cases/prevent-container-breakout/#block-access-to-the-procsys-directory-in-the-container","text":"file : mode : block target : container allow : - / deny : - /proc/sys Example root@ubuntu-impish:/# ls /proc/sys abi debug dev fs kernel net user vm root@ubuntu-impish:/# docker run --privileged --rm -it ubuntu:latest bash root@9cf961922b00:/# ls /proc/sys ls: cannot open directory '/proc/sys' : Operation not permitted","title":"Block access to the /proc/sys directory in the container"},{"location":"use-cases/prevent-container-breakout/#block-escapes-from-privileged-container","text":"file : mode : block target : container allow : - / deny : - /proc/sysrq-trigger - /sys/kernel - /proc/sys/kernel Example root@ubuntu-impish:/# docker run --privileged --rm -it ubuntu:latest bash root@e3b2ffe5b284:/# echo c > /proc/sysrq-trigger bash: /proc/sysrq-trigger: Operation not permitted root@e3b2ffe5b284:/# echo '/path/to/evil' > /sys/kernel/uevent_helper bash: /sys/kernel/uevent_helper: Operation not permitted root@e3b2ffe5b284:/# echo '|/path/to/evil' > /proc/sys/kernel/core_pattern bash: /proc/sys/kernel/core_pattern: Operation not permitted","title":"Block escapes from Privileged Container"},{"location":"use-cases/prevent-ssrf/","text":"Prevent SSRF Attacks Block access to the public cloud Metadata Service. This is a mitigation measure against SSRF, etc. network : mode : block target : host cidr : allow : [ '0.0.0.0/0' ] deny : - 169.254.169.254/32","title":"Prevent SSRF"},{"location":"use-cases/prevent-ssrf/#prevent-ssrf-attacks","text":"Block access to the public cloud Metadata Service. This is a mitigation measure against SSRF, etc. network : mode : block target : host cidr : allow : [ '0.0.0.0/0' ] deny : - 169.254.169.254/32","title":"Prevent SSRF Attacks"},{"location":"use-cases/prevent-supply-chain-attack-and-hardening-github-actions/","text":"Prevent Supply Chain Attacks and Hardening GitHub Actions Self-hosted Runner In recent years, there have been many incidents of credentials being compromised from CI / CD environments due to supply chain attacks. Prevent against supply chain attacks signature and hash verification, and more, but restrict egress is another measure that should be taken. bouheki can be installed in a CI/CD environment to restrict network communication by domain name or process name. Hardening GitHub Actions Self-hosted Runner Hardening a Workflow running on GitHub Actions Self-hosted Runner is done in the following steps: 1. Install bouheki Install bouheki with reference to Installation . 2. Create the bouheki configuration file network : mode : block target : host cidr : allow : [ \"8.8.8.8/32\" , \"8.8.4.4/32\" , \"127.0.0.1/32\" , \"10.0.0.8\" , \"172.16.0.0/12\" , \"192.168.0.0/16\" ] # Add the DNS Server, etc. to be used. domain : allow : # https://docs.github.com/ja/actions/hosting-your-own-runners/about-self-hosted-runners# - \"github.com\" , - \"api.github.com\" , - \"codeload.github.com\" , - \"objects.github.com\" , - \"objects.githubusercontent.com\" , - \"objects-origin.githubusercontent.com\" , - \"github-releases.githubusercontent.com\" , - \"github-registry-files.githubusercontent.com\" , dns_proxy : enable : true upstreams : - 8.8.8.8 - 8.8.4.4 log : format : json 3. Change the DNS Server to be used Change /etc/resolv.conf to use bouheki's DNS Proxy. bouheki DNS Proxy also listens on 172.17.0.1 , this default bridge for Docker; this IP address must also be specified in the nameserver so that the Docker container can resolve names. $ cat /etc/resolv.conf nameserver 127 .0.0.1 nameserver 172 .17.0.1 search . If you are using systemd-resolved, do not modify /etc/resolv.conf . You must change /etc/systemd/resolved.conf . # cat /etc/systemd/resolved.conf [ Resolve ] DNS = 127 .0.0.1 172 .17.0.1 # systemctl restart systemd-resolved 4. Execute the Actions Workflow Warning WIP https://github.com/mrtc0/bouheki-runner allows you to restrict access to per Workflows.","title":"Prevent Supply Chain Attacks"},{"location":"use-cases/prevent-supply-chain-attack-and-hardening-github-actions/#prevent-supply-chain-attacks-and-hardening-github-actions-self-hosted-runner","text":"In recent years, there have been many incidents of credentials being compromised from CI / CD environments due to supply chain attacks. Prevent against supply chain attacks signature and hash verification, and more, but restrict egress is another measure that should be taken. bouheki can be installed in a CI/CD environment to restrict network communication by domain name or process name.","title":"Prevent Supply Chain Attacks and Hardening GitHub Actions Self-hosted Runner"},{"location":"use-cases/prevent-supply-chain-attack-and-hardening-github-actions/#hardening-github-actions-self-hosted-runner","text":"Hardening a Workflow running on GitHub Actions Self-hosted Runner is done in the following steps:","title":"Hardening GitHub Actions Self-hosted Runner"},{"location":"use-cases/prevent-supply-chain-attack-and-hardening-github-actions/#1-install-bouheki","text":"Install bouheki with reference to Installation .","title":"1. Install bouheki"},{"location":"use-cases/prevent-supply-chain-attack-and-hardening-github-actions/#2-create-the-bouheki-configuration-file","text":"network : mode : block target : host cidr : allow : [ \"8.8.8.8/32\" , \"8.8.4.4/32\" , \"127.0.0.1/32\" , \"10.0.0.8\" , \"172.16.0.0/12\" , \"192.168.0.0/16\" ] # Add the DNS Server, etc. to be used. domain : allow : # https://docs.github.com/ja/actions/hosting-your-own-runners/about-self-hosted-runners# - \"github.com\" , - \"api.github.com\" , - \"codeload.github.com\" , - \"objects.github.com\" , - \"objects.githubusercontent.com\" , - \"objects-origin.githubusercontent.com\" , - \"github-releases.githubusercontent.com\" , - \"github-registry-files.githubusercontent.com\" , dns_proxy : enable : true upstreams : - 8.8.8.8 - 8.8.4.4 log : format : json","title":"2. Create the bouheki configuration file"},{"location":"use-cases/prevent-supply-chain-attack-and-hardening-github-actions/#3-change-the-dns-server-to-be-used","text":"Change /etc/resolv.conf to use bouheki's DNS Proxy. bouheki DNS Proxy also listens on 172.17.0.1 , this default bridge for Docker; this IP address must also be specified in the nameserver so that the Docker container can resolve names. $ cat /etc/resolv.conf nameserver 127 .0.0.1 nameserver 172 .17.0.1 search . If you are using systemd-resolved, do not modify /etc/resolv.conf . You must change /etc/systemd/resolved.conf . # cat /etc/systemd/resolved.conf [ Resolve ] DNS = 127 .0.0.1 172 .17.0.1 # systemctl restart systemd-resolved","title":"3. Change the DNS Server to be used"},{"location":"use-cases/prevent-supply-chain-attack-and-hardening-github-actions/#4-execute-the-actions-workflow","text":"Warning WIP https://github.com/mrtc0/bouheki-runner allows you to restrict access to per Workflows.","title":"4. Execute the Actions Workflow"}]}